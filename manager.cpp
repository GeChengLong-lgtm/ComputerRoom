#include "manager.h"
#include "globalFile.h"
#include <fstream>
using namespace std;

//默认构造函数
Manager::Manager() {

}

//有参构造函数
Manager::Manager(string name, string pwd) {

	this->m_Name = name;
	this->m_Pwd = pwd;

	this->initVector();

	ifstream ifs;
	ifs.open(COMPUTER_FILE, ios::in);
	if (!ifs.is_open()) {
		cout << "文件打开失败!" << endl;
		ifs.close();
		return;
	}

	ComputerRoom c;
	while (ifs >> c.m_ComId && ifs >> c.m_MaxNum) {
		vCom.push_back(c);
	}
	cout << "当前机房数量为：" << vCom.size() << endl;
	ifs.close();
}

//显示学生操作的菜单界面
void Manager::operMenu() {

	cout << "欢迎管理员：" << this->m_Name << "登录！" << endl;
	cout << "\t\t ---------------------------------\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          1.添加账号            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          2.查看账号            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          3.查看机房            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          4.清空预约            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t|          0.注销登录            |\n";
	cout << "\t\t|                                |\n";
	cout << "\t\t ---------------------------------\n";
	cout << "请选择您的操作： " << endl;
}

//添加账号
void Manager::addAccount() {

	cout << "请输入添加账号的类型：" << endl;
	cout << "1、添加学生" << endl;
	cout << "2、添加教师" << endl;

	string filename;
	string tip;
	ofstream ofs;

	string errorTip;
	int select = 0;
	cin >> select;

	if (select == 1) {
		filename = STUDENT_FILE;
		tip = "请输入学号：";
		errorTip = "学号重复，请重新输入：";
	}
	else {
		filename = TEACHER_FILE;
		tip = "请输入职工号：" ;
		errorTip = "职工号重复，请重新输入：";
	}

	ofs.open(filename, ios::out | ios::app);
	int id;
	string name;
	string pwd;
	cout << tip << endl;

	while (1) {
		cin >> id;
		bool ret = this->checkRepeat(id, select);

		if (ret) {
			cout << errorTip << endl;
		}
		else {
			break;
		}
	}

	cout << "请输入姓名：" << endl;
	cin >> name;

	cout << "请输入密码：" << endl;
	cin >> pwd;

	ofs << id << " " << name << " " << pwd << endl;
	cout << "添加成功！" << endl;

	system("pause");
	system("cls");

	ofs.close();

	//调用初始化容器接口，重新获取文件中的数据
	this->initVector();
}

//查看账号
void Manager::checkAccount() {

	cout << "请输入想查看的人员内容：" << endl;
	cout << "1、查看所有学生" << endl;
	cout << "2、查看所有教师" << endl;

	int select = 0;

	cin >> select;

	if (select == 1) {
		cout << "所有学生信息如下：" << endl;
		for (vector<Student>::iterator it = vStu.begin();
			it != vStu.end(); it++) {
			cout << "学号：" << it->m_Id
				<< " 姓名：" << it->m_Name
				<< " 密码：" << it->m_Pwd << endl;
		}
	}
	else if (select == 2) {
		cout << "所有教职工信息如下：" << endl;
		for (vector<Teacher>::iterator it = vTea.begin();
			it != vTea.end(); it++) {
			cout << "学号：" << it->m_EmpId
				<< " 姓名：" << it->m_Name
				<< " 密码：" << it->m_Pwd << endl;
		}
	}
}

//查看机房信息
void Manager::checkComputer() {

	cout << "当前机房信息如下：" << endl;
	for (vector<ComputerRoom>::iterator it = vCom.begin();
		it != vCom.end(); it++) {
		cout << "机房编号为：" << it->m_ComId
			<< "机房最大容量为：" << it->m_MaxNum << endl;
	}

	system("pause");
	system("cls");
}

//清空预约记录
void Manager::clearOrder() {

	ofstream ofs(ORDER_FILE, ios::trunc);
	ofs.close();

	cout << "清空成功！" << endl;
	system("pause");
	system("cls");
}

//初始化容器
void Manager::initVector() {

	ifstream ifs;
	ifs.open(STUDENT_FILE, ios::in);
	if (!ifs.is_open()) {
		cout << "文件读取失败" << endl;
		ifs.close();
		return;
	}

	vStu.clear();
	vTea.clear();

	Student s;
	while (ifs >> s.m_Id && ifs >> s.m_Name && ifs >> s.m_Pwd) {
		vStu.push_back(s);
	}
	cout << "当前学生数量为：" << vStu.size() << endl;
	ifs.close();

	ifs.open(TEACHER_FILE, ios::in);
	Teacher t;
	while (ifs >> t.m_EmpId && ifs >> t.m_Name && ifs >> t.m_Pwd) {
		vTea.push_back(t);
	}
	cout << "当前教师数量为：" << vTea.size() << endl;
	ifs.close();
}

//检测重复 
bool Manager::checkRepeat(int id, int type) {

	if (type == 1) {
		for (vector<Student>::iterator it = vStu.begin();
			it != vStu.end(); it++) {
			if (it->m_Id == id) {
				return true;
			}
		}
	}
	else {
		for (vector<Teacher>::iterator it = vTea.begin();
			it != vTea.end(); it++) {
			if (it->m_EmpId == id) {
				return true;
			}
		}
	}
	return false;
}